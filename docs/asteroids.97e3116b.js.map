{"version":3,"sources":["../node_modules/stats.js/build/stats.min.js","math-utils.ts","dom-utils.ts","GameObject.ts","Particle.ts","Rock.ts","Bullet.ts","KeyboardController.ts","Player.ts","Game.ts","asteroids.ts"],"names":[],"mappings":"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","file":"asteroids.97e3116b.js","sourceRoot":"../src","sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","\nexport const degreesToRadians = (degrees: number) => degrees * (Math.PI / 180);\nexport const radiansToDegrees = (radians: number) => radians * (180 / Math.PI);\n\nexport function vector(args: { length: number; degrees: number }): { x: number; y: number; }\nexport function vector(args: { length: number; radians: number }): { x: number; y: number; }\nexport function vector({ length, ...radiansOrDegrees }: ({\n  radians: number;\n} | {\n  degrees: number;\n}) & {\n  length: number;\n}): {\n  x: number;\n  y: number;\n} {\n  const radians = \"radians\" in radiansOrDegrees\n    ? radiansOrDegrees.radians\n    : degreesToRadians(radiansOrDegrees.degrees);\n  return {\n    x: Math.cos(radians) * length,\n    y: Math.sin(radians) * length\n  };\n}\n\nexport function vectorLength({ x, y }: { x: number; y: number; }): number {\n  return Math.sqrt((x * x) + (y * y));\n}\n\nexport function distanceBetween(from: { x: number; y: number; }, to: { x: number; y: number; }): number {\n  const deltaX = from.x - to.x;\n  const deltaY = from.y - to.y;\n  return Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));\n}","export function createContainerElement() {\n  const elem = document.createElement(\"div\");\n  elem.style.cssText = `position: absolute; top: 0; left: 0; right: 0; bottom: 0;`;\n  return elem;\n}\n\nexport function createRadialCanvasElement(radius: number) {\n  const elem = document.createElement(\"canvas\");\n  elem.style.cssText = `position: absolute; top: -${radius}px; left: -${radius}px`;\n  elem.width = radius * 2;\n  elem.height = radius * 2;\n  return elem;\n}\n","import { Game } from \"./Game\";\nimport { createRadialCanvasElement } from \"./dom-utils\";\nimport { createContainerElement } from \"./dom-utils\";\n\nexport abstract class GameObject {\n  x: number = 0;\n  y: number = 0;\n  radius: number = 0;\n  rotation: number = 0;\n  friction: number = 0;\n  vector: {\n    x: number;\n    y: number;\n  } = { x: 0, y: 0 };\n  graphics = createContainerElement();\n\n  constructor(public game: Game) { }\n\n  abstract draw(): void;\n\n  createCanvas() {\n    const canvas = createRadialCanvasElement(this.radius);\n    this.graphics.appendChild(canvas);\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx)\n      throw new Error(`Context not ready`);\n    return { canvas, ctx };\n  }\n\n  update(frameTime: number): void {\n    if (this.friction) {\n      this.vector.x *= this.friction;\n      this.vector.y *= this.friction;\n    }\n    if (this.vector.x !== 0 || this.vector.x !== 0) {\n      this.x += this.vector.x * frameTime;\n      this.y += this.vector.y * frameTime;\n      this.loop();\n    }\n  }\n\n  render() {\n    this.graphics.style.left = `${this.x}px`;\n    this.graphics.style.top = `${this.y}px`;\n    this.graphics.style.transform = `rotate(${this.rotation}deg)`;\n    this.graphics.style.transformOrigin = `top left`;\n  }\n\n  loop() {\n    const viewport = this.game.viewport;\n    if (this.x > viewport.width + this.radius)\n      this.x -= viewport.width + this.radius * 2;\n    else if (this.x < -this.radius)\n      this.x += viewport.width + this.radius * 2;\n    if (this.y > viewport.height + this.radius)\n      this.y -= viewport.height + this.radius * 2;\n    else if (this.y < -this.radius)\n      this.y += viewport.height + this.radius * 2;\n  }\n}\n","import { Game } from \"./Game\";\nimport { GameObject } from \"./GameObject\";\nimport { vector, vectorLength } from \"./math-utils\";\n\nexport class Particle extends GameObject {\n  canvas!: HTMLCanvasElement;\n  color = \"gray\";\n  minSpeed = 10;\n  maxSpeed = 50;\n  maxScale = 15;\n\n  constructor(game: Game, degrees: number) {\n    super(game);\n    this.radius = 2;\n    this.rotation = degrees;\n    const speed = this.minSpeed + (this.maxSpeed - this.minSpeed) * Math.random();\n    this.vector = vector({ length: speed, degrees });\n    this.friction = .88;\n  }\n\n  draw() {\n    const { canvas, ctx } = this.createCanvas();\n    this.canvas = canvas;\n    ctx.beginPath();\n    ctx.moveTo(this.radius * 2, 0);\n    ctx.lineTo(this.radius * 2, this.radius * 2);\n    ctx.lineTo(0, this.radius);\n    ctx.closePath();\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n\n  update(frameTime: number) {\n    super.update(frameTime);\n    const speed = vectorLength(this.vector);\n    if (speed < 1) {\n      this.game.removeObject(this);\n    }\n  }\n  \n  render() {\n    super.render();\n    const speed = vectorLength(this.vector);\n    const scale = this.maxScale * (speed / this.maxSpeed);\n    this.canvas.style.transform = `scaleX(${scale})`;\n  }\n}\n","import { Game } from \"./Game\";\nimport { GameObject } from \"./GameObject\";\nimport { vector } from \"./math-utils\";\n\nexport class Rock extends GameObject {\n  spin: number;\n  health: number;\n  static maxIteration = 3;\n  static rocksSpawnedOnDeath = 3;\n\n  constructor(game: Game, public iteration: number = 1) {\n    super(game);\n    this.iteration = iteration;\n    this.health = 12 - iteration * 2;\n    this.spin = Math.random() * iteration;\n    this.radius = 75 / iteration;\n    this.vector = vector({ length: iteration, degrees: Math.random() * 360 });\n  }\n\n  draw() {\n    const { ctx } = this.createCanvas();\n    ctx.beginPath();\n    ctx.translate(this.radius, this.radius);\n    const edges = 12, noise = .44;\n    for (let i = 0; i < edges; i++) {\n      const degrees = ((360 / edges) * i) + ((360 / edges) * noise * Math.random());\n      const length = this.radius - (this.radius * noise * Math.random());\n      const { x, y } = vector({ length, degrees });\n      ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  update(frameTime: number) {\n    super.update(frameTime);\n    this.rotation += this.spin * frameTime;\n  }\n  \n  hit() {\n    if (--this.health <= 0) {\n      this.game.removeObject(this);\n      this.game.addParticles(25, { x: this.x, y: this.y });\n      if (this.iteration < Rock.maxIteration) {\n        const iteration = this.iteration + 1;\n        this.game.addRocks(Rock.rocksSpawnedOnDeath, { x: this.x, y: this.y, iteration });\n      }\n    }\n  }\n}\n","import { Game } from \"./Game\";\nimport { GameObject } from \"./GameObject\";\nimport { Rock } from \"./Rock\";\nimport { vector } from \"./math-utils\";\n\nexport class Bullet extends GameObject {\n  speed = 10;\n  life = 120;\n  impactDepth = 3;\n\n  constructor(game: Game, degrees: number, initVector: {\n    x: number;\n    y: number;\n  }) {\n    super(game);\n    this.radius = 3;\n    this.rotation = degrees;\n    this.vector = vector({ length: this.speed, degrees });\n    this.vector.x += initVector.x;\n    this.vector.y += initVector.y;\n  }\n\n  draw() {\n    const { canvas, ctx } = this.createCanvas();\n    ctx.beginPath();\n    ctx.moveTo(this.radius * 2, this.radius);\n    ctx.lineTo(this.radius * 1.5, this.radius * 2);\n    ctx.lineTo(0, this.radius);\n    ctx.lineTo(this.radius * 1.5, 0);\n    ctx.closePath();\n    ctx.fill();\n    canvas.style.transform = `scaleX(3)`;\n  }\n  \n  update(frameTime: number) {\n    super.update(frameTime);\n    this.life -= frameTime;\n    if (this.life <= 0) {\n      this.game.removeObject(this);\n    }\n    else {\n      const collidedRocks = this.game.getObjectsIntersectingCircle({\n        x: this.x,\n        y: this.y,\n        radius: -this.impactDepth\n      }, Rock);\n      if (collidedRocks.length) {\n        this.game.addParticles(5, { x: this.x, y: this.y });\n        this.game.removeObject(this);\n        collidedRocks.forEach(rock => rock.hit());\n      }\n    }\n  }\n}\n","export class KeyboardController {\n  keys: {\n    [code: string]: boolean;\n  } = {};\n\n  constructor() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n    window.addEventListener(\"keyup\", this.handleKeyUp);\n  }\n\n  handleKeyDown = (e: KeyboardEvent) => {\n    // console.log(\"keyDown\", e.code);\n    this.keys[e.code] = true;\n  };\n\n  handleKeyUp = (e: KeyboardEvent) => {\n    this.keys[e.code] = false;\n  };\n  \n  isDown(key: string): boolean {\n    return !!this.keys[key];\n  }\n}\n","import { Game } from \"./Game\";\nimport { GameObject } from \"./GameObject\";\nimport { vector } from \"./math-utils\";\nimport { KeyboardController } from \"./KeyboardController\";\n\nexport class Player extends GameObject {\n  rotationSpeed = 3;\n  thrustSpeed = .15;\n  refireDelay = 5;\n  keyboard = new KeyboardController();\n  refire = 0;\n\n  constructor(game: Game) {\n    super(game);\n    this.radius = 12;\n    this.friction = .99;\n  }\n\n  draw() {\n    const { ctx } = this.createCanvas();\n    ctx.beginPath();\n    ctx.moveTo(this.radius * 2, this.radius);\n    ctx.lineTo(0, this.radius * 2);\n    ctx.lineTo(this.radius / 2, this.radius);\n    ctx.lineTo(0, 0);\n    ctx.closePath();\n    ctx.fill();\n  }\n  \n  update(frameTime: number) {\n    super.update(frameTime);\n    if (this.keyboard.isDown(\"ArrowLeft\")) {\n      this.rotation -= this.rotationSpeed * frameTime;\n    }\n    if (this.keyboard.isDown(\"ArrowRight\")) {\n      this.rotation += this.rotationSpeed * frameTime;\n    }\n    if (this.keyboard.isDown(\"ArrowUp\")) {\n      const { x, y } = vector({ length: this.thrustSpeed * frameTime, degrees: this.rotation });\n      this.vector.x += x * frameTime;\n      this.vector.y += y * frameTime;\n      const offset = vector({ length: this.radius + this.radius * Math.random(), degrees: this.rotation - 180 });\n      this.game.addParticles(1, { x: this.x + offset.x, y: this.y + offset.y, angleDegrees: this.rotation - 180, spreadDegrees: 35 });\n    }\n    this.refire -= 1 * frameTime;\n    if (this.keyboard.isDown(\"Space\") && this.refire <= 0) {\n      this.refire = this.refireDelay;\n      const offset = vector({ length: this.radius, degrees: this.rotation });\n      this.game.addBullet({ x: this.x + offset.x, y: this.y + offset.y, degrees: this.rotation, vector: this.vector });\n    }\n  }\n}\n","import Stats from \"stats.js\";\nimport { distanceBetween } from \"./math-utils\";\nimport { Particle } from \"./Particle\";\nimport { Bullet } from \"./Bullet\";\nimport { Player } from \"./Player\";\nimport { Rock } from \"./Rock\";\nimport { GameObject } from \"./GameObject\";\n\nexport class Game {\n  static FRAME_TIME = 1000 / 60;\n  objects: GameObject[] = [];\n  animationFrameHandle?: number;\n  lastUpdateTime?: number;\n  stats = new Stats();\n\n  constructor(public container: HTMLElement) {\n    container.appendChild(this.stats.dom);\n    this.addRocks(3);\n    this.addPlayer();\n    this.start();\n  }\n\n  start() {\n    this.lastUpdateTime = performance.now();\n    this.animationFrameHandle = requestAnimationFrame(this.update);\n  }\n\n  update = (time: number) => {\n    this.stats.begin();\n    const frameTime = 1; // (time - this.lastUpdateTime) / Game.FRAME_TIME;\n    this.lastUpdateTime = time;\n    this.objects.forEach(obj => {\n      obj.update(frameTime);\n      obj.render();\n    });\n    this.stats.end();\n    this.animationFrameHandle = requestAnimationFrame(this.update);\n  };\n\n  stop() {\n    this.animationFrameHandle && cancelAnimationFrame(this.animationFrameHandle);\n  }\n\n  addRocks(count: number, source?: {\n    x: number;\n    y: number;\n    iteration: number;\n  }) {\n    while (count--)\n      this.addObject(this.createRock(source));\n  }\n\n  createRock(source?: {\n    x: number;\n    y: number;\n    iteration: number;\n  }) {\n    const rock = new Rock(this, source ? source.iteration : undefined);\n    rock.x = source ? source.x : Math.random() * this.viewport.width;\n    rock.y = source ? source.y : Math.random() * this.viewport.height;\n    return rock;\n  }\n\n  addPlayer() {\n    this.addObject(this.createPlayer());\n  }\n\n  createPlayer() {\n    const player = new Player(this);\n    player.x = this.viewport.width / 2;\n    player.y = this.viewport.height / 2;\n    return player;\n  }\n\n  addBullet(args: {\n    x: number;\n    y: number;\n    degrees: number;\n    vector: {\n      x: number;\n      y: number;\n    };\n  }) {\n    this.addObject(this.createBullet(args));\n  }\n\n  createBullet({ x, y, degrees, vector }: {\n    x: number;\n    y: number;\n    degrees: number;\n    vector: {\n      x: number;\n      y: number;\n    };\n  }) {\n    const bullet = new Bullet(this, degrees, vector);\n    bullet.x = x;\n    bullet.y = y;\n    return bullet;\n  }\n\n  addParticles(count: number, source: {\n    x: number;\n    y: number;\n    angleDegrees?: number;\n    spreadDegrees?: number;\n  }) {\n    const { x, y, angleDegrees = 0, spreadDegrees = 360 } = source;\n    while (count--) {\n      const degrees = angleDegrees - spreadDegrees / 2 + spreadDegrees * Math.random();\n      this.addObject(this.createParticle({ x, y, degrees }));\n    }\n  }\n\n  createParticle({ x, y, degrees }: {\n    x: number;\n    y: number;\n    degrees: number;\n  }) {\n    const particle = new Particle(this, degrees);\n    particle.x = x;\n    particle.y = y;\n    return particle;\n  }\n\n  addObject(obj: GameObject) {\n    this.objects.push(obj);\n    obj.draw();\n    obj.render();\n    this.container.appendChild(obj.graphics);\n  }\n\n  removeObject(obj: GameObject) {\n    this.objects.splice(this.objects.indexOf(obj), 1);\n    this.container.removeChild(obj.graphics);\n  }\n\n  getObjectsIntersectingCircle<T extends GameObject = GameObject>({ radius, ...point }: {\n    x: number;\n    y: number;\n    radius: number;\n  }, type?: {\n    new(...args: any[]): T;\n  }): T[] {\n    const objects = type\n      ? this.objects.filter(obj => obj instanceof type) as T[]\n      : this.objects as T[];\n    return objects.filter(obj => {\n      return distanceBetween(point, obj) <= obj.radius + radius;\n    });\n  }\n  get viewport() {\n    return this.container.getBoundingClientRect();\n  }\n}\n","import { Game } from \"./Game\";\nimport { createContainerElement } from \"./dom-utils\";\n\nsetTimeout(create);\n\nfunction create() {\n  const container = createContainerElement();\n  container.style.overflow = \"hidden\";\n  document.body.appendChild(container);\n\n  const game = new Game(container);\n}"]}